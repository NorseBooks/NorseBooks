// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use '~@angular/material' as mat;
// Plus imports for other components in your app.

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat.core();

$norsebooks-palette-primary: (
  50: #e8eafc,
  100: #c5c9f8,
  200: #9da6f3,
  300: #7283ef,
  400: #4e66eb,
  500: #1e49e6,
  600: #1841da,
  700: #0036ce,
  800: #002ac3,
  900: #000eb2,
  contrast: (
    50: white,
    100: white,
    200: white,
    300: white,
    400: white,
    500: white,
    600: white,
    700: white,
    800: white,
    900: white,
  ),
);

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$norsebooks-primary: mat.define-palette($norsebooks-palette-primary);
$norsebooks-accent: mat.define-palette(mat.$amber-palette, A200, A100, A400);

// The warn palette is optional (defaults to red).
$norsebooks-warn: mat.define-palette(mat.$red-palette);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$norsebooks-theme: mat.define-light-theme(
  (
    color: (
      primary: $norsebooks-primary,
      accent: $norsebooks-accent,
      warn: $norsebooks-warn,
    ),
  )
);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-component-themes($norsebooks-theme);

/* You can add global styles to this file, and also import other style files */

$primary-color: #1e49e6;
$secondary-color: white;

html,
body {
  height: 100%;
}
body {
  margin: 0;
  font-family: Roboto, 'Helvetica Neue', sans-serif;
}

::selection {
  background-color: lighten($primary-color, 5%);
  color: $secondary-color;
}

@mixin centerer($horizontal: true, $vertical: true) {
  position: absolute;

  @if ($horizontal and $vertical) {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  } @else if ($horizontal) {
    left: 50%;
    transform: translate(-50%, 0);
  } @else if ($vertical) {
    top: 50%;
    transform: translate(0, -50%);
  }
}

@mixin full-center {
  @include centerer(true, true);
}

@mixin std-link {
  color: blue;
  text-decoration: none;
  transition: color 0.1s ease;

  &:hover {
    color: darken(blue, 15%);
    text-decoration: underline;
  }

  &:active {
    color: darken(blue, 25%);
  }
}

@mixin flex-grid($width, $gap) {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: $gap;

  & > * {
    flex: 0 1 $width;
  }
}

@mixin line-cutoff($num-lines) {
  -webkit-box-orient: vertical;
  display: -webkit-box;
  -webkit-line-clamp: $num-lines;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: normal;
}

@mixin hover-zoom($zoom-amount: 1.05) {
  transition: transform 0.2s;

  &:hover {
    transform: scale($zoom-amount);
  }
}

@mixin grayscale($value: 100%) {
  -webkit-filter: #{'grayscale(#{$value})'};
  -moz-filter: #{'grayscale(#{$value})'};
  filter: #{'grayscale(#{$value})'};
}

a.standard-link {
  @include std-link;
}

.max-width {
  width: 100%;
}

.error-text {
  color: red;
}

.form-error-text {
  color: red;
  margin-top: 8px;
}

.text-justified {
  text-align: justify;
}

.text-center {
  text-align: center;
}

.center {
  margin: auto;
}

.spinner {
  text-align: center;
  margin: 16px auto;
}

.space-between {
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
}
